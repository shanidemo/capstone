# Python CircleCI 2.0 configuration file
version: 2.1
orbs:
  docker: circleci/docker@2.0.1
  kubernetes: circleci/kubernetes@0.12.0
  aws-eks: circleci/aws-eks@1.1.0
commands:
  destroy-cluster:
    description: Destroy EKS cluster
    parameters:
      cluster-name:
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/delete-cluster:
          cluster-name: << parameters.cluster-name >>
          aws-region: us-east-2
          wait: true
            
jobs:
  preBuild:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            make lint
  build:
    # docker:
    #   - image: python:3.7.3-stretch
    machine: true
    steps:
      - checkout
      - run:
          name: build image
          command: |
            docker build -t prediction .
            docker images
            dockerpath=/prediction
            docker login -u $DUSER -p $DPASS
            docker tag prediction:latest shivai/prediction:latest
            echo "Docker ID and Image: $dockerpath"
            docker push shivai/prediction:latest
  # create-eks-cluster:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         Name of the EKS cluster
  #       type: string
  #   steps:
  #     - checkout
  #     - aws-eks/install-aws-iam-authenticator:
  #         release-tag: ''
  #     - run:
  #         name: Install the eksctl tool
  #         command: |
  #           if which eksctl > /dev/null; then
  #             echo "eksctl is already installed"
  #             exit 0
  #           fi
  #           mkdir -p eksctl_download
  #           uname -s
  #           curl -L "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" | tar xz -C eksctl_download
  #           chmod +x eksctl_download/eksctl
  #           SUDO=""
  #           if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
  #             SUDO="sudo"
  #           fi
  #           $SUDO mv eksctl_download/eksctl /usr/local/bin/
  #           rmdir eksctl_download   

  #     - aws-eks/create-cluster:
  #         cluster-name: << parameters.cluster-name >>
  #         skip-kubectl-install: false
  #         verbose: 3
  #         node-type: t2.small
  #         nodes-max: 2
  #         ssh-access: false
  #         ssh-public-key: 'ohio'
      # - destroy-cluster:
      #     cluster-name: shiva-capstone
      #     when: on_fail

  test-eks-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Kube cluster
          command: |
            kubectl get services
  deploy-app:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Kube cluster
          command: |
            pwd
            ls -lha
            bash /home/circleci/project/BlueGreen.sh
            ls -l
            sleep 30
            kubectl get svc service-loadbalancer
            sleep 200
            kubectl get svc service-loadbalancer
            sleep 60
  delete-capston-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string    
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          when: on_fail
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            # curl --silent -L --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" \
            #   | tar xz -C eksctl_download
            curl -L "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/delete-cluster:
          cluster-name: << parameters.cluster-name >>
          aws-region: us-east-2
          wait: true
  test:
    executor: aws-eks/python3
    steps:
      - checkout
      - run:
          command: |
            pwd
            ls -lha
            bash /home/circleci/project/BlueGreen.sh
            ls -lha
workflows:
  default:
    jobs:
      # - test
      - preBuild
      - build:
          requires: [preBuild]
      # - create-eks-cluster:
      # #     cluster-name: capstone
      # - test-eks-cluster:
      #     cluster-name: capstone
          # requires: [create-eks-cluster]
      - deploy-app:
          cluster-name: capstone
          requires: [build]
      - delete-capston-cluster:
          cluster-name: capstone
          requires: [deploy-app]
